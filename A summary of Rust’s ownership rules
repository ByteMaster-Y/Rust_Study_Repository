// 러스트 소유권 규칙:
// 1) 러스트가 다루는 각각의 값은 소유자 라고 부르는 변수를 가지고 있다.
// 2) 특정 시점에 값의 소유자는 단 하나뿐이다.
// 3) 소유자가 범위를 벗어나면 그 값은 제거된다.

// String 타입

fn main() {
    let s = String::from("hello"); // 변수 s는 이 지점부터 유효

    // 변수 s를 이용해 동작 수행.
    
} // 여기서 범위를 벗어나서 이제 유효하지 않음.

// 변수와 데이터가 상호작용하는 방식: 복제(Clone)

fn main() {
    let s1 = String::from("hello"); 
    let s2 = s1.clone();

    println!("{}, world", s1);
    println!("{}, world!", s2);
    
} 
// 이 코드는 복사하는 메모리의 크기에 따라 무거운 작업이 될 수도 있다.

// 스택 전용 데이터: 복사(Copy)

fn main() {
    let x = 5;
    let y = x;

    println!("x = {}, y = {}",x , y);
} 

// 소유권과 함수, 그리고 범위의 관계

fn main() {
    let s = String::from("hello"); // 변수 s가 범위 내 생성

    takes_ownership(s); // 변수 s의 값이 함수 내로 이동
                        // 그리고 이 시점부터 변수 s는 더 이상 유효X

    let x = 5;

    makes_copy(x); 
    // 변수 x의 값이 함수 내로 이동한다.
    // 하지만 i32 타입은 복사를 수행하므로 변수 x는 이 시점 이후로도 여전히 유효하다.
}  // 이 지점에서 변수 x가 범위를 벗어난 후 , 다음으로 변수 s도 범위를 벗어난다.
// 하지만 변수 s의 값은 함수 내로 이동했기 때문에 아무런 일도 일어나지 X

fn takes_ownership(some_string: String) {
    println!("{}", some_string); 
} // 이 지점에서 some_string 변수가 범위를 벗어나며 'drop' 함수 호출.
// 따라서 some_string 변수가 사용중이던 메모리가 해제

fn makes_copy(some_integer: i32) {
    println!("{}", some_integer);
} // 이 지점에서 some_integer는 범위를 벗어나지만, 아무런 일도 X

// 리턴값의 소유권 이전

fn main() {
    let s1 = give_ownership(); // give_ownership 함수의 리턴값이 변수 s1으로 이동

    let s2 = String::from("hello");

    let s3 = takes_and_gives_back(s2); // 옮겨간 후 리턴값은 s3로 옮겨짐

} // 이 시점에서 변수 s3이 범위를 벗어나며 drop함수 호출
// 변수 s2 역시 범위를 벗어나지만 takes_and_gives_back 함수로 옮겨서 아무일도 X
// 변수 s1 역시 범위를 벗어날 때 drop 호출

fn give_ownership() -> String {
    let some_string = String::from("hello");
    
    some_string
}

// takes_and_gives_back 함수는 stirng 인수를 전달받아 그 값을 다시 리턴
fn takes_and_gives_back(a_string: String) -> String {
    a_string
}

// 참조와 대여

fn main() {
    let s1 = String::from("hello");

    let len = calculate_length(&s1);

    println!("{}의 길이는 {}입니다.", s1, len);
}

fn calculate_length(s: &String) -> usize {
    s.len()
}

// 출력 결과 -> hello의 길이는 5입니다.

// 가변 참조

fn main() {
    let mut s = String::from("hello");

    change(&mut s);
}

fn change(some_string: &mut String) {
    some_string.push_str(", world");
}

// 하지만 가변 참조에도 한 가지 제약이 있다. 
// 특정 범위 내의 특정 데이터에 대한 가변 참조는 오직 한 개만 존재해야 한다.

// 죽은 참조

fn main() {
    let reference_to_nothing = dangle();
}

fn dangle() -> &String {
    let s = String::from("hello");

    &s // String 타입의 변수 s에 대한 참조 리턴
    // 하지만 이 지점에서 변수 s가 범위를 벗어나므로 drop 함수 호출되고 메모리 해제.
}

// 위 예제를 컴파일 하면 다음과 같은 에러가 발생하는 데
// "이 함수의 리턴 타입은 대여한 값을 리턴하고자 하지만 실제로 대여해 올 값이 존재하지 않는다."
